<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://kennethrioja.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kennethrioja.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-05T22:14:32+00:00</updated><id>https://kennethrioja.github.io/feed.xml</id><title type="html">blank</title><subtitle>Research, EdTech, Video Games, Data Analysis, UX </subtitle><entry><title type="html">A guide to the Performance tab in Chrome/Brave Webtools</title><link href="https://kennethrioja.github.io/blog/2024/a-guide-to-the-performance-tab/" rel="alternate" type="text/html" title="A guide to the Performance tab in Chrome/Brave Webtools"/><published>2024-11-01T13:00:00+00:00</published><updated>2024-11-01T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/a-guide-to-the-performance-tab</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/a-guide-to-the-performance-tab/"><![CDATA[<p>Working in a cognitive neuroscience lab involves doing research with real people, and when researchers are studying vision they need computerized tasks with accurate frame-by-frame displays.</p> <p>The UFOV (<a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4354665/">Yung et al., 2015</a>) is one of the <a href="https://www.brainandlearning.org/tasks">tasks used at the lab</a> to measure visuo-spatial attention. The task displays a stimulus during an <em>n</em> number of frame (e.g., for a screen at the refresh rate of 60Hz, displaying 60 frames per second, meaning 1/60 = 16.667ms). However, it appeared that when testing the task with a photodiode, the stimulus was always shown with one supplementary frame.</p> <p>After debugging the draw loop of the task, how to test the task ‘frame-by-frame’ or at least in a precise manner?</p> <p>I first watch this <a href="https://www.youtube.com/watch?v=0fONene3OIA">first guide to web performance</a> where I got introduced with:</p> <ul> <li>LCP, Largest Contentful Paint which is the Loading Time of the page which must be under 2.5sec. The video says that a bad LCP == a bad SEO and there are three methods to reduce this LCP time, first reduce assets size, second use a CDN, third avoid setTimeout(), fourth preload content.</li> <li>FID, First Input Delay is Interactivity which must be under 100ms.</li> <li>CLS, Cummulative Layout Shift which is Visual Stability and must be under 0.1. To enhance the user experience use img width &amp; height and srcset.</li> </ul> <p>Enough <em>blabla</em>.</p> <p>I downloaded the Web Vitals Extension to check for FID, but what was the most important for me was how to check for LCP. And in a more extreme manner, I needed to get a display time of 16.667ms on a 60Hz monitor. How did I do it? Check <a href="https://www.youtube.com/watch?v=hjmdDsvkwyc">my guide to the performance tab</a>!</p>]]></content><author><name></name></author><category term="code"/><category term="ui"/><category term="data"/><summary type="html"><![CDATA[Working in a cognitive neuroscience lab involves doing research with real people, and when researchers are studying vision they need computerized tasks with accurate frame-by-frame displays.]]></summary></entry><entry><title type="html">How to connect to your EC2 instance</title><link href="https://kennethrioja.github.io/blog/2024/how-to-connect-to-ec2/" rel="alternate" type="text/html" title="How to connect to your EC2 instance"/><published>2024-10-21T13:00:00+00:00</published><updated>2024-10-21T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/how-to-connect-to-ec2</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/how-to-connect-to-ec2/"><![CDATA[<ol> <li>Click on “EC2”</li> <li>Click on “Key pairs”</li> <li>On the top right click on “Create key pair” -&gt; a key pair will allow you to connect in ssh to AWS, you are creating your identity FOR AWS (not yet the instance)</li> <li>Enter a key pair name (e.g., kennethunige) + leave RSA and .pem ticked and “Create key pair”</li> <li>It will ask you to download your key pair, keep it in a folder you know you can find it back easily</li> <li>Open a terminal, locate your recently downloaded .pem file (on Mac you can left click, hold ‘option’ and ‘Copy “myFile.pem” as pathname”) and run <code class="language-plaintext highlighter-rouge">chmod 400 /path/to/your/myFile.pem</code> -&gt; this .pem file (= your identity to AWS) should be only read by you and not open to the ‘others’ nor ‘world’ group, this is a requirement when using ‘ssh’</li> <li>Run <code class="language-plaintext highlighter-rouge">ssh-keygen -y -f /path/to/your/myFile.pem</code> and copy the output beginning by ‘ssh-rsa Bl4bLaAA…’-&gt; this is the public key to be able to identify you IN THE INSTANCE</li> <li>Give this output to someone that has access to the AWS instance</li> <li>For the person having already access to the AWS instance: <ul> <li>Connect to the instance</li> <li>Run <ul> <li><code class="language-plaintext highlighter-rouge">sudo adduser newuser</code> (newuser being your name)</li> <li><code class="language-plaintext highlighter-rouge">sudo su - newuser</code> (you should now be connected as ‘newuser’, see [newuser ~]$)</li> <li><code class="language-plaintext highlighter-rouge">mkdir .ssh</code></li> <li><code class="language-plaintext highlighter-rouge">chmod 700 .ssh</code></li> <li><code class="language-plaintext highlighter-rouge">touch .ssh/authorized_keys</code></li> <li><code class="language-plaintext highlighter-rouge">chmod 600 .ssh/authorized_keys</code></li> <li><code class="language-plaintext highlighter-rouge">nano .ssh/authorized_keys</code> and paste the public key given by newuser</li> <li>Exit the instance</li> </ul> </li> </ul> </li> <li>Come back to your EC2 dashoard &gt; Instances &gt; click on the running instance</li> <li>Copy the Public IPv4 DNS (top right of your screen) <ul> <li>Now it should be all good, you have your private key in your computer (your .pem file), the public key of this .pem file has been put in ‘authorized_keys’ on the instance with your username, you have your username and the address to where you want to connect (IPv4 DNS)</li> </ul> </li> <li>CHANGE ALL THE RELEVANT FIELDS: Run <code class="language-plaintext highlighter-rouge">ssh -i /path/to/your/myFile.pem username@pasteHerePublicUPv4DNS</code>. For example for me it is : <code class="language-plaintext highlighter-rouge">ssh -i /path/to/my/Key.pem kenneth@&lt;IPv4 DNS&gt;</code></li> <li>Welcome to the EC2 instance!</li> </ol> <p>I personally went with an alias + .sh file to not write the whole ssh command</p> <ol> <li>Create a ‘.sh’ file : <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/env bash
ssh -i /path/to/my/Key.pem kenneth@&lt;IPv4 DNS&gt;
</code></pre></div> </div> </li> <li>Create an alias on your .bashrc or .bash_profile : <code class="language-plaintext highlighter-rouge">alias ec2='sh /Users/bavelierlab/aws/connectaws.sh'</code></li> <li>Run <code class="language-plaintext highlighter-rouge">source .bashrc</code></li> <li>Run <code class="language-plaintext highlighter-rouge">ec2</code> and here is your shortcut!</li> </ol>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[Click on “EC2” Click on “Key pairs” On the top right click on “Create key pair” -&gt; a key pair will allow you to connect in ssh to AWS, you are creating your identity FOR AWS (not yet the instance) Enter a key pair name (e.g., kennethunige) + leave RSA and .pem ticked and “Create key pair” It will ask you to download your key pair, keep it in a folder you know you can find it back easily Open a terminal, locate your recently downloaded .pem file (on Mac you can left click, hold ‘option’ and ‘Copy “myFile.pem” as pathname”) and run chmod 400 /path/to/your/myFile.pem -&gt; this .pem file (= your identity to AWS) should be only read by you and not open to the ‘others’ nor ‘world’ group, this is a requirement when using ‘ssh’ Run ssh-keygen -y -f /path/to/your/myFile.pem and copy the output beginning by ‘ssh-rsa Bl4bLaAA…’-&gt; this is the public key to be able to identify you IN THE INSTANCE Give this output to someone that has access to the AWS instance For the person having already access to the AWS instance: Connect to the instance Run sudo adduser newuser (newuser being your name) sudo su - newuser (you should now be connected as ‘newuser’, see [newuser ~]$) mkdir .ssh chmod 700 .ssh touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys nano .ssh/authorized_keys and paste the public key given by newuser Exit the instance Come back to your EC2 dashoard &gt; Instances &gt; click on the running instance Copy the Public IPv4 DNS (top right of your screen) Now it should be all good, you have your private key in your computer (your .pem file), the public key of this .pem file has been put in ‘authorized_keys’ on the instance with your username, you have your username and the address to where you want to connect (IPv4 DNS) CHANGE ALL THE RELEVANT FIELDS: Run ssh -i /path/to/your/myFile.pem username@pasteHerePublicUPv4DNS. For example for me it is : ssh -i /path/to/my/Key.pem kenneth@&lt;IPv4 DNS&gt; Welcome to the EC2 instance!]]></summary></entry><entry><title type="html">GameLab Conference</title><link href="https://kennethrioja.github.io/blog/2024/conference-game-lab/" rel="alternate" type="text/html" title="GameLab Conference"/><published>2024-09-04T13:00:00+00:00</published><updated>2024-09-04T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/conference-game-lab</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/conference-game-lab/"><![CDATA[]]></content><author><name></name></author><category term="university"/><category term="research"/><category term="videogames"/><summary type="html"><![CDATA[I present my master's thesis with Digital Kingdom as one of the attendees]]></summary></entry><entry><title type="html">My internship as a backend dev</title><link href="https://kennethrioja.github.io/blog/2024/my-first-internship-as-a-dev/" rel="alternate" type="text/html" title="My internship as a backend dev"/><published>2024-07-12T13:00:00+00:00</published><updated>2024-07-12T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/my-first-internship-as-a-dev</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/my-first-internship-as-a-dev/"><![CDATA[<p>Validating an internship is mandatory within the <a href="https://www.unige.ch/fapse/brainlearning/">MALTT</a>. I wanted to do something related to video games while learning something new. <a href="https://www.linkedin.com/in/sanchezeric/">Eric Sanchez</a> gave me the opportunity to work on a project in his lab, the LIP (<a href="https://www.lip-unige.ch/">Laboratoire d’Innovation Pédagogique</a>), involving a pedagocical video game headed by <a href="https://www.linkedin.com/in/mariem-jaouadi-26489053/">Mariem Jaouadi</a>. They gave me the choice between a research-oriented or a dev-oriented intership. I jumped into the second option because I wanted to use my recently acquired skills from <a href="https://42lausanne.ch/">42 Lausanne</a>.</p> <p>Find the report of my internship <a href="https://tecfaetu.unige.ch/etu-maltt/baldur/rioja0/internship/report_rioja_2024.pdf">here</a> (in french).</p> <p>During my 16 weeks of internship, I spend the first part to understand the context and got the theoretical background of what a RESTful API is and how it can send data to an SQL database.</p> <p>I hesitated to begin coding with Java Spring, but since I got no former experience with Python, I decided to go with the latter.</p> <p>Then I followed courses on how to learn Python which was quickly done thanks to my background in coding in C and C++. I followed <a href="https://peps.python.org/pep-0008/">PEP8</a> style guide to have an clean code.</p> <p>When it came to design the RESTful API, needed to choose between Django and Flask, the first one being a ‘batteries included’ framework versus the micro-framework Flask. I chose to go along with Flask since the lab did not need the whole Front-End that Django is offering, a simple Back-End app with Flask was doing the job. I then followed parts from the <a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">Flask Mega Tutorial</a> while enhancing the entire architecture using blueprints, decorators, error handling, a route to export logs in a csv file, an ACL and token auth (JWT).</p> <p>Finally, with the help of the system engineer <a href="https://www.linkedin.com/in/stephane-morand/">Stéphane</a>, he gave me the rights to locate my app in the server, deployed and did the necessary tests to say I successfully deployed the RESTful API in the lab’s server! Yaay!</p> <p>Find the <a href="https://github.com/kennethrioja/flask-restfulapi/">GitHub repo of the RESTful API</a> with its documentation and a <a href="https://www.youtube.com/watch?v=yZxAamS0hrY">video in french</a> in french on how it looks like.</p>]]></content><author><name></name></author><category term="videogames"/><category term="code"/><category term="data"/><summary type="html"><![CDATA[Creating a RESTful API for a video game]]></summary></entry><entry><title type="html">How to substring in R</title><link href="https://kennethrioja.github.io/blog/2024/substring-in-R/" rel="alternate" type="text/html" title="How to substring in R"/><published>2024-06-23T13:00:00+00:00</published><updated>2024-06-23T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/substring-in-R</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/substring-in-R/"><![CDATA[<p>Do a sub(sub())!</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sub(".*Energy", "", sub("Prop.*","","EnergyFossilProp"))
</code></pre></div></div>]]></content><author><name></name></author><category term="university"/><category term="code"/><category term="data"/><summary type="html"><![CDATA[Do a sub(sub())!]]></summary></entry><entry><title type="html">How to begin a script or project in R?</title><link href="https://kennethrioja.github.io/blog/2024/how-to-begin-a-script-or-project-in-r/" rel="alternate" type="text/html" title="How to begin a script or project in R?"/><published>2024-05-29T13:00:00+00:00</published><updated>2024-05-29T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/how-to-begin-a-script-or-project-in-r</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/how-to-begin-a-script-or-project-in-r/"><![CDATA[<p>If you have never heard about snippets, it is like an autocompletion that <strong>you</strong> have written in advance. At the end of this blog post, you will be able to write a project skeleton to begin your R project as well as being able to write a snippet. The project skeleton includes packages installation, csv/xlsx import, .csv / .pdf / .RData export.</p> <p>For the advanced people willing to have a hands-on solution, you can directly jump to the <a href="#snippets">end of this article</a> to copy-paste the header snippet.</p> <h2 id="building-your-project-skeleton">Building your project skeleton</h2> <h3 id="description">Description</h3> <p>When I read any kind of script, I like to read about what this script is all about, who wrote it, why and when. In order to do this, you can begin any project with this kind of header (Do not forget to open a new project (Cmd + Shift + N)) :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## /\ ----
## __________________________
## Title:
## Author: NAME SURNAME, INSTITUTION
## Email: johndoe@example.com
## Date Created: 2024-05-29
## __________________________
## Code Outline:
## 1. ...
## 2. ...
## __________________________
## Notes:
##  
## __________________________
</code></pre></div></div> <p>Here you can write more about the specs of your code, maybe the Code Outline is a bit overkill here, it depends on what you want to convey.</p> <h3 id="initial-setup">Initial setup</h3> <p>I love having a structured code and easy to navigate. Like this blog post and its different titles and sub-titles (for example, &lt;h1&gt;, &lt;h2&gt; for HTML), you can do this in R too! Here is the first header I always have in my projects:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Top ----
</code></pre></div></div> <p>Ok, thanks but how does it makes the code easier to navigate? Click on the icon with lines on the top right of the file panel, next to “Source”. Taa-daa! You can now see and click on “Top” to make your cursor in the selected header. Neat!</p> <p>Let’s get into the initial setup now, try to understand the following code :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Clear workspace
rm(list=ls())

## Seed for random number generation
set.seed(42)

## Load packages
# install.packages("pacman")
library(pacman)
pacman::p_load(
# insert packages' name here
  "rstudioapi"
)

## Set working directory to current folder
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# getwd()
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">rm(list=ls())</code> is used to clear the current environment</p> <p><code class="language-plaintext highlighter-rouge">set.seed(42)</code> was a mystic function when I began coding in R. It affects random generation of numbers, plots in the way that when you run this function before any random generation, it will always create the same value for a random number or the same organisation for a plot. In short, it is necessary when you want to be reproducible when using random generation.</p> <p><code class="language-plaintext highlighter-rouge">p_load()</code> coming from the package <code class="language-plaintext highlighter-rouge">pacman</code> (as we can see by the namespace used before the function, <code class="language-plaintext highlighter-rouge">thisisanamespace::thisisafunction()</code>) allows to <code class="language-plaintext highlighter-rouge">install.packages()</code> and <code class="language-plaintext highlighter-rouge">library()</code> at the same time. You can continue adding packages by writing them in brackets and separated by a coma.</p> <p><code class="language-plaintext highlighter-rouge">setwd(dirname(rstudioapi::getSourceEditorContext()$path))</code> allows to set the working directory to the path of the current project. If you have followed this tutorial and you run this, you can see that it displays an error, this is because you have not saved your project somewhere. Save your project, rerun the line, it works, <em>bravo</em>.<br/> If you want to check what your current working directory is, run <code class="language-plaintext highlighter-rouge">getwd()</code>.</p> <h3 id="load-environment-or-csv">Load environment or csv</h3> <p>As easy as it is, here is the code :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Load environment or read .csv files
load(".RData")
df &lt;- read.csv(".csv")
</code></pre></div></div> <h3 id="more-headers">More headers!</h3> <p>Here is how you write more headers :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 1. ... ----

### 1.1 ... ----

#### 1.1.1 ... ----

## 2. ... ----
</code></pre></div></div> <p>You can see your right panel being updated with these new headers!</p> <h3 id="save">Save</h3> <p>At the end of each project you must export something, either a cleaned version of the raw data you have in a .csv format, either a plot that you want to show to your collaborators in .pdf, or a whole .RData environment to begin your analyses in a fresh start. Here is my workflow for each of these steps. Modify it so that is suits your needs !</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Save ----
output_dir = "./output"
proj_name = "projname"
name_raw = paste(output_dir, '/', proj_name, '_', gsub('-','',Sys.Date()), sep='')

dir.create(output_dir, showWarnings = T)

## Save df into a csv
write.csv(df, paste(name_raw, ".csv", sep=''), row.names=FALSE)

## Save a plot into a pdf
pdf(file=paste(name_raw, ".pdf", sep=''), onefile = TRUE)
## Run your ggplot here
dev.off()

rm(output_dir, proj_name, name_raw)

## Save environment
save.image(gsub(" ","",paste("output/environment_mem_",gsub("-","",Sys.Date()),".RData")))
</code></pre></div></div> <h2 id="snippets">Snippets</h2> <p>First go to <em>Edit</em> &gt; <em>Preferences</em>, on the left of the newly displayed window click on <em>Code</em> then on the bottom of the page click on <em>Edit Snippets…</em>. Copy and paste the following code in line 1 of the current window. Make sure to have a line break at the end of the code.</p> <p>Once pasted, click on <em>Save</em> &gt; <em>Apply</em> &gt; <em>OK</em>. Now type <code class="language-plaintext highlighter-rouge">head</code> and you should see an autocompletion suggestion of <code class="language-plaintext highlighter-rouge">header</code> which is a snippet, press <em>Enter</em> and here it is!</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>snippet header
	## __________________________
	## Title:
	## Author: NAME SURNAME, INSTITUTION
	## Email: 
	## Date Created: `r Sys.Date()`
	## __________________________
	## Code Outline:
	## 1. ...
	## 2. ...
	## __________________________
	## Notes:
	##  
	## __________________________
	
	## Top ----
	## clear workspace
	rm(list=ls())

	## Seed for random number generation
	set.seed(42)
	
	## Load packages
	# install.packages("pacman")
	library(pacman)
	pacman::p_load(
	# insert packages' name here
 		"rstudioapi",
		"dplyr"
	)
	
	## Set working directory to current folder
	setwd(dirname(rstudioapi::getSourceEditorContext()$path))
	
	## Load environment or read .csv files
	load("mydata.RData")
	df &lt;- read.csv("")
	
	## 1. ... ----

	### 1.1 ... ----

	#### 1.1.1 ... ----

	## 2. ... ----

	## Save ----
	output_dir = "./output"
	proj_name = "projname"
	name_raw = paste(output_dir, '/', proj_name, '_', gsub('-','',Sys.Date()), sep='')
	
	dir.create(output_dir, showWarnings = T)
	
	# Save df into a csv
	write.csv(df, paste(name_raw, ".csv", sep=''), row.names=FALSE)

	# Save a plot into a pdf
	pdf(file=paste(name_raw, ".pdf", sep=''), onefile = TRUE)
	# run your ggplot here
	dev.off()
	
	rm(output_dir, proj_name, name_raw)

	# Save environment
	save.image(gsub(" ","",paste("output_dir/environment_mem_",gsub("-","",Sys.Date()),".RData")))

</code></pre></div></div>]]></content><author><name></name></author><category term="work"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[Write a snippet with the initial script skeleton!]]></summary></entry><entry><title type="html">How to create csv and pdf files in R?</title><link href="https://kennethrioja.github.io/blog/2024/how-to-create-csv-and-pdf-files-in-r/" rel="alternate" type="text/html" title="How to create csv and pdf files in R?"/><published>2024-05-24T13:00:00+00:00</published><updated>2024-05-24T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/how-to-create-csv-and-pdf-files-in-r</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/how-to-create-csv-and-pdf-files-in-r/"><![CDATA[<p>This example provides you with a way to create an <code class="language-plaintext highlighter-rouge">output</code> directory at the root of your R project and writes a csv and a pdf with the current date at the end of its name.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Clear workspace
rm(list=ls())

## Seed for random number generation
set.seed(42)

## Set working directory to current path 
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# getwd()

## Reproducible example
df &lt;- mtcars
output_dir = "./output"
proj_name = "projname"
name_raw = paste(output_dir, '/', proj_name, '_', gsub('-','',Sys.Date()), sep='')

## Create directory
dir.create(output_dir, showWarnings = T)

## Create csv
write.csv(df, paste(name_raw, ".csv", sep=''))

## Create pdf
pdf(file=paste(name_raw, ".pdf", sep=''), onefile = TRUE)
plot(df$cyl, df$mpg)
dev.off()

rm(output_dir, proj_name, name_raw)

## Save environment
save.image(paste(name_raw, ".RData", sep=''))
</code></pre></div></div>]]></content><author><name></name></author><category term="work"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[A short and concise example.]]></summary></entry><entry><title type="html">How to collaborate in Unity using GitHub?</title><link href="https://kennethrioja.github.io/blog/2024/how-to-collaborate-in-unity-using-github/" rel="alternate" type="text/html" title="How to collaborate in Unity using GitHub?"/><published>2024-05-17T13:00:00+00:00</published><updated>2024-05-17T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/how-to-collaborate-in-unity-using-github</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/how-to-collaborate-in-unity-using-github/"><![CDATA[<p>Let me be clear.</p> <blockquote> <p>You <strong>cannot</strong> work synchronously on one same interface in Unity.</p> </blockquote> <p>I have worked on several Unity projects and the general workflow we adopted with my team is to separately work on each of a feature, and once it is done, implement it in our “final scene”.</p> <p>Legend:</p> <ul> <li>(All/One/Others), means that the bullet point should be done by ‘All’ team members, ‘One’ team member, the ‘Others’ from your team.</li> <li><code class="language-plaintext highlighter-rouge">git commit -m "&lt;something-here&gt;"</code> means that you can replace <code class="language-plaintext highlighter-rouge">&lt;something-here&gt;</code> to whatever you want, like <code class="language-plaintext highlighter-rouge">git commit -m "I write what I want"</code>.</li> </ul> <p>Here are the steps to cooperate on the same Unity project:</p> <h2 id="setup-the-cooperation">Setup the cooperation</h2> <ol> <li> <p>(All) <a href="https://unity.com/releases/editor/qa/lts-releases">Download and install the same Long Term Support release of Unity</a></p> </li> <li> <p>(One) Open Unity, click on “New Project”, choose your location, do not connect to Unity Cloud and click on “Create Project”.</p> </li> <li> <p>(One) In Unity, go in <code class="language-plaintext highlighter-rouge">Assets/Scenes</code> and copy-paste the <code class="language-plaintext highlighter-rouge">SampleScene</code> and rename it <code class="language-plaintext highlighter-rouge">MainScene</code>. Conflicts may rise due to working in the same Scene. This is why each and every team member will work on a copy of this <code class="language-plaintext highlighter-rouge">MainScene</code>. The trick is to work separately on your own copied scene and implement in <code class="language-plaintext highlighter-rouge">MainScene</code> what you have done once you feel you have something finished to be implemented.</p> </li> <li> <p>(All) If not done yet, <a href="https://github.com/signup?user_email=&amp;source=form-home-signup">create a GitHub account</a></p> </li> <li> <p>(One) <a href="https://github.com/new">Create a repository on GitHub</a> : no template, enter your repository name and description, keep it public, tick ‘Add a README.md’, add a .gitignore and choose ‘Unity’, if you don’t know what license to use, choose GNU v3.0 or CC0 v1.0.</p> </li> <li> <p>(One) On GitHub, click on “Code” the big green button, choose “SSH”, click on the copy icon.</p> </li> <li>(One) On your computer, open a terminal, navigate to the directory where you have your freshly new Unity project and type the following commands: <ul> <li><code class="language-plaintext highlighter-rouge">git init</code> to initialize git in your directory</li> <li><code class="language-plaintext highlighter-rouge">git checkout -b &lt;my-branch-name&gt;</code> to create creating a branch name <code class="language-plaintext highlighter-rouge">&lt;my-branch-name&gt;</code> (you can choose another one)</li> <li><code class="language-plaintext highlighter-rouge">git remote add origin &lt;paste-the-ssh-here&gt;</code> to link your local git to the remote one</li> <li><code class="language-plaintext highlighter-rouge">git pull origin main</code> to download the .gitignore, README.md and LICENCE files.</li> <li><code class="language-plaintext highlighter-rouge">git add .</code> to add to staging the Unity project you’ve created</li> <li><code class="language-plaintext highlighter-rouge">git commit -m "chore(setup): adding project"</code> to commit the files and making them ready to be pushed</li> <li><code class="language-plaintext highlighter-rouge">git push --set-upstream origin &lt;my-branch-name&gt;</code></li> </ul> </li> <li> <p>(One) Once you’ve done this, when going to the project’s main page in github, you would see a yellow rectangle asking for “Compare &amp; pull request”, click on this button. Normally it should be “Able to merge”, click on “Create a pull request” &gt; “Merge pull request” &gt; “Confirm merge” &gt; “Delete branch”</p> </li> <li> <p>(One) Go now on “Settings” &gt; “Collaborators”, and “Add people” who you want them to be part of the project.</p> </li> <li>(Others) Accept the invitation to collaborate on GitHub and copy the SSH link, go to a terminal and get to the directory you want to create a clone of the repository. Execute these commands : <ul> <li><code class="language-plaintext highlighter-rouge">git clone &lt;paste-the-ssh-here&gt;</code>, now you should be able to see the exact same repository than your colleague and GitHub.</li> <li><code class="language-plaintext highlighter-rouge">git checkout -b &lt;my-awesome-branch-name&gt;</code>, to create another branch and not work on <code class="language-plaintext highlighter-rouge">main</code>.</li> <li><code class="language-plaintext highlighter-rouge">git status</code>, to see on what branch you are + see the files you have modified, you should be in my-awesome-branch-name</li> </ul> </li> <li>(All) Be sure to make a copy of <code class="language-plaintext highlighter-rouge">MainScene</code> and you can begin to create in your scene.</li> </ol> <h2 id="merge-request">Merge Request</h2> <p>Now that you have finished a feature and/or implemented it on the <code class="language-plaintext highlighter-rouge">MainScene</code>, be sure to be on your branch, execute <code class="language-plaintext highlighter-rouge">git status</code> to be able to see where you are.</p> <p>Once in your branch and you saw the files you have modified, run the following commands in your terminal :</p> <ul> <li><code class="language-plaintext highlighter-rouge">git add .</code></li> <li><code class="language-plaintext highlighter-rouge">git commit -m "&lt;your-message-here&gt;"</code></li> <li><code class="language-plaintext highlighter-rouge">git push --set-upstream origin &lt;your-awesome-branch-name&gt;</code></li> </ul> <p>Like the point 6. above : Go to the project’s main page in github, you would see a yellow rectangle asking for “Compare &amp; pull request”, click on this button. Normally it should be “Able to merge”, click on “Create a pull request” &gt; “Merge pull request” &gt; “Confirm merge” &gt; “Delete branch”</p> <p>Go back to your terminal, run :</p> <ul> <li><code class="language-plaintext highlighter-rouge">git checkout -b &lt;another-branch&gt;</code></li> <li><code class="language-plaintext highlighter-rouge">git pull origin main</code></li> </ul> <p>And you are ready to go for another round!</p>]]></content><author><name></name></author><category term="videogames"/><category term="code"/><category term="hobby"/><summary type="html"><![CDATA[A tutorial to work asynchronously on a Unity project.]]></summary></entry><entry><title type="html">How I upgraded my graphic design skills</title><link href="https://kennethrioja.github.io/blog/2024/how-i-upgraded-my-graphic-design-skills/" rel="alternate" type="text/html" title="How I upgraded my graphic design skills"/><published>2024-05-08T13:00:00+00:00</published><updated>2024-05-08T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/how-i-upgraded-my-graphic-design-skills</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/how-i-upgraded-my-graphic-design-skills/"><![CDATA[<p>During the past two months I took graphic design courses using <a href="https://affinity.serif.com/en-gb/">Affinity</a> Publisher and Designer. When finding arguments to justify paying 100.- to attend this course, I had a global objective in mind: “Be familiar with an <em>easy-to-use</em> Mac app to be able to digitally create and design”, and more precisely: “Be able to create UI icons or Instagram posts for the next video games made by <a href="https://www.instagram.com/verykoolgames/">Very Kool Games</a>”.</p> <p>However, we did not have on going projects at this time so I decided to use the recently acquired skills to create a poster for an event I was organising and here is the result:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <a href="https://www.instagram.com/wizstreetcomp/" target="_blank"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog_gwscposter-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog_gwscposter-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog_gwscposter-1400.webp"/> <img src="/assets/img/blog_gwscposter.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="geneva wiz street comp poster" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </a> </div> <div class="col-sm mt-3 mt-md-0"></div> </div> <p>Also when creating the instagram page of the event, I wanted something visually appealing when arriving on the page, so I created a personalized grid to display the multiple sponsors of the event:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"></div> <div class="col-sm mt-3 mt-md-0"> <a href="https://www.instagram.com/wizstreetcomp/"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blog_gwscgrid-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blog_gwscgrid-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blog_gwscgrid-1400.webp"/> <img src="/assets/img/blog_gwscgrid.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="geneva wiz street comp instagram grid" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </a> </div> <div class="col-sm mt-3 mt-md-0"></div> </div> <p>What I want to say here is that, when you engage yourself in a course, hackathon, gamejam or or if you are learning something, find a quick project to apply this knowledge during or right after the event. During the event where you are learning something, focus your time and energy on this specific aim. Ask specific questions to the mentors or teachers who are present. And ultimately, show that you have done it 😉</p>]]></content><author><name></name></author><category term="ui"/><category term="hobby"/><category term="misc"/><summary type="html"><![CDATA[Using Affinity Designer for social media posts]]></summary></entry><entry><title type="html">Les jeux vidéo, amis ou ennemis des capacités d’apprentissage?</title><link href="https://kennethrioja.github.io/blog/2024/les-jeux-video-amis-ou-ennemis-des-capacites-d-apprentissage/" rel="alternate" type="text/html" title="Les jeux vidéo, amis ou ennemis des capacités d’apprentissage?"/><published>2024-03-28T13:00:00+00:00</published><updated>2024-03-28T13:00:00+00:00</updated><id>https://kennethrioja.github.io/blog/2024/les-jeux-video-amis-ou-ennemis-des-capacites-d-apprentissage</id><content type="html" xml:base="https://kennethrioja.github.io/blog/2024/les-jeux-video-amis-ou-ennemis-des-capacites-d-apprentissage/"><![CDATA[]]></content><author><name></name></author><category term="university"/><category term="research"/><category term="videogames"/><summary type="html"><![CDATA[Une discussion avec deux membres du Brain and Learning Lab]]></summary></entry></feed>